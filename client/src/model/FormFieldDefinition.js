/**
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveOcrApiClient) {
      root.CloudmersiveOcrApiClient = {};
    }
    root.CloudmersiveOcrApiClient.FormFieldDefinition = factory(root.CloudmersiveOcrApiClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The FormFieldDefinition model module.
   * @module model/FormFieldDefinition
   * @version 1.2.3
   */

  /**
   * Constructs a new <code>FormFieldDefinition</code>.
   * Definition of a form field for OCR data extraction from images
   * @alias module:model/FormFieldDefinition
   * @class
   */
  var exports = function() {
    var _this = this;














  };

  /**
   * Constructs a <code>FormFieldDefinition</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormFieldDefinition} obj Optional instance to populate.
   * @return {module:model/FormFieldDefinition} The populated <code>FormFieldDefinition</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('FieldID')) {
        obj['FieldID'] = ApiClient.convertToType(data['FieldID'], 'String');
      }
      if (data.hasOwnProperty('LeftAnchor')) {
        obj['LeftAnchor'] = ApiClient.convertToType(data['LeftAnchor'], 'String');
      }
      if (data.hasOwnProperty('TopAnchor')) {
        obj['TopAnchor'] = ApiClient.convertToType(data['TopAnchor'], 'String');
      }
      if (data.hasOwnProperty('AnchorMode')) {
        obj['AnchorMode'] = ApiClient.convertToType(data['AnchorMode'], 'String');
      }
      if (data.hasOwnProperty('DataType')) {
        obj['DataType'] = ApiClient.convertToType(data['DataType'], 'String');
      }
      if (data.hasOwnProperty('TargetDigitCount')) {
        obj['TargetDigitCount'] = ApiClient.convertToType(data['TargetDigitCount'], 'Number');
      }
      if (data.hasOwnProperty('MinimumCharacterCount')) {
        obj['MinimumCharacterCount'] = ApiClient.convertToType(data['MinimumCharacterCount'], 'Number');
      }
      if (data.hasOwnProperty('AllowNumericDigits')) {
        obj['AllowNumericDigits'] = ApiClient.convertToType(data['AllowNumericDigits'], 'Boolean');
      }
      if (data.hasOwnProperty('VerticalAlignmentType')) {
        obj['VerticalAlignmentType'] = ApiClient.convertToType(data['VerticalAlignmentType'], 'String');
      }
      if (data.hasOwnProperty('HorizontalAlignmentType')) {
        obj['HorizontalAlignmentType'] = ApiClient.convertToType(data['HorizontalAlignmentType'], 'String');
      }
      if (data.hasOwnProperty('TargetFieldWidth_Relative')) {
        obj['TargetFieldWidth_Relative'] = ApiClient.convertToType(data['TargetFieldWidth_Relative'], 'Number');
      }
      if (data.hasOwnProperty('TargetFieldHeight_Relative')) {
        obj['TargetFieldHeight_Relative'] = ApiClient.convertToType(data['TargetFieldHeight_Relative'], 'Number');
      }
      if (data.hasOwnProperty('Ignore')) {
        obj['Ignore'] = ApiClient.convertToType(data['Ignore'], ['String']);
      }
    }
    return obj;
  }

  /**
   * @member {String} FieldID
   */
  exports.prototype['FieldID'] = undefined;
  /**
   * @member {String} LeftAnchor
   */
  exports.prototype['LeftAnchor'] = undefined;
  /**
   * @member {String} TopAnchor
   */
  exports.prototype['TopAnchor'] = undefined;
  /**
   * @member {String} AnchorMode
   */
  exports.prototype['AnchorMode'] = undefined;
  /**
   * @member {String} DataType
   */
  exports.prototype['DataType'] = undefined;
  /**
   * @member {Number} TargetDigitCount
   */
  exports.prototype['TargetDigitCount'] = undefined;
  /**
   * @member {Number} MinimumCharacterCount
   */
  exports.prototype['MinimumCharacterCount'] = undefined;
  /**
   * @member {Boolean} AllowNumericDigits
   */
  exports.prototype['AllowNumericDigits'] = undefined;
  /**
   * @member {String} VerticalAlignmentType
   */
  exports.prototype['VerticalAlignmentType'] = undefined;
  /**
   * @member {String} HorizontalAlignmentType
   */
  exports.prototype['HorizontalAlignmentType'] = undefined;
  /**
   * @member {Number} TargetFieldWidth_Relative
   */
  exports.prototype['TargetFieldWidth_Relative'] = undefined;
  /**
   * @member {Number} TargetFieldHeight_Relative
   */
  exports.prototype['TargetFieldHeight_Relative'] = undefined;
  /**
   * @member {Array.<String>} Ignore
   */
  exports.prototype['Ignore'] = undefined;



  return exports;
}));


